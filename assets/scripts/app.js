/**
 * Passons maintenant √† l'impl√©mentation du JavaScript.
 *
 * Ce fichier contient du code JavaScript qui doit √™tre ex√©cut√© sur toutes les pages.
 * Par exemple, le code qui g√®re le formulaire de newsletter.
 */

/**
 * EVENT LISTENER
 *
 * Un "event listener" est une fonction qui √©coute un √©v√©nement sur un √©l√©ment HTML.
 *
 * Ici, on √©coute l'√©v√©nement "DOMContentLoaded" sur le document pour v√©rifier que le DOM est bien charg√© (c'est-√†-dire que la page est bien pr√™te)
 * et on ex√©cute une fonction qui contient notre code JavaScript (c'est une bonne pratique pour √©viter les probl√®mes de chargement).
 *
 * Note: on utilise une fonction fl√©ch√©e (ES6) pour d√©finir la fonction de rappel
 */
document.addEventListener("DOMContentLoaded", () => {
  /* Une fois que le DOM est charg√©, on appelle la fonction init() pour initialiser nos scripts */
  init();
});

/**
 * INITIALISATION
 * On cr√©e une fonction qui initialise les scripts JavaScript qui doivent √™tre exc√©cut√©s sur toutes les pages.
 */
function init() {
  /* On affiche un message dans la console pour v√©rifier que le fichier est bien charg√© (pas obligatoire, mais pratique d√©bugger) */
  console.log("app.js charg√© üöÄ");

  /* On initialise la fonction newsletterSubscribe */
  newsletterSubscribe();

  /* On initialise aussi la fonction toggleThemeMode() */
  toggleThemeMode();

  /* On initialise la fonction closeNotification() */
  closeNotification();
}

/**
 * Fonction qui g√®re le formulaire de newsletter
 *
 * Cette fonction est appel√©e dans l'event listener ci-dessus.
 * Elle nous sert √† v√©rifier que l'email est valide et active le bouton d'envoi si c'est le cas.
 */
function newsletterSubscribe() {
  /* On commence par cibler le formulaire de newsletter grace √† son id en utilisant querySelector() et on le stock dans une constante "newsletterForm" */
  const newsletterForm = document.querySelector("#newsletter-form");

  /* On r√©cup√®re maintenant l'input de l'email et on le stock dans une constante "emailInput" */
  const emailInput = document.querySelector("input[type=email]");

  /* On r√©cup√®re aussi le bouton d'envoi et on le stock dans une constante "submitButton" */
  const submitButton = document.querySelector("button[type=submit]");

  /**
   * STOP ! Attendez une minute !
   * Si le formulaire OU <input type=email > OU <button type="submit"> n'existent pas, nous aurons des erreurs.
   * En effet, les prochaines instructions sont construites sur l'hypoth√®se que ces √©l√©ments existent.
   * Pour √©viter cela, nous devons v√©rifier si le formulaire et les champs dont nous avons besoin existent bien avant de continuer.
   *
   * Nous utilisons donc une condition IF pour v√©rifier si newsletterForm, emailInput et submitButton existent bien.
   * Si l'un d'eux n'existe pas, nous sortons de la fonction en utilisant le mot-cl√© RETURN.
   */
  if (!newsletterForm || !emailInput || !submitButton) {
    return;
  }

  /* Super üëç, maintenant continuons... */

  /* On commence par d√©sactiver le bouton d'envoi par d√©faut pour √©viter l'envoi avant v√©rification du champ */
  submitButton.disabled = true;

  /*
   * Cette fonction valide le champ email du formulaire de newsletter.
   * Elle utilise la fonction validateEmail() pour v√©rifier si l'email est valide.
   */
  function validateNewsletterEmailField() {
    /* SI l'email est valide en utilisant la fonction validateEmail() */
    if (validateEmail(emailInput.value)) {
      /*
       * donc SI validateEmail() renvoie 'true' (l'email est valide),
       * on active le bouton d'envoi en d√©finissant sa propri√©t√© 'disabled' √† 'false'.
       */
      submitButton.disabled = false;
    } else {
      /*
       * SINON, si l'email n'est pas valide,
       * on d√©sactive le bouton d'envoi en d√©finissant sa propri√©t√© 'disabled' √† 'true'.
       */
      submitButton.disabled = true;
    }
  }

  /*
   * Cette fonction valide une adresse email.
   * Elle utilise une expression r√©guli√®re pour v√©rifier si l'email est dans un format valide.
   * Elle renvoie 'true' si l'email est valide et 'false' sinon.
   */
  function validateEmail(email) {
    /**
     * D√©finit l'expression r√©guli√®re pour un format d'email valide
     * Cette expression r√©guli√®re est assez simple et ne couvre pas tous les cas possibles.
     *
     * Voir: https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Global_Objects/RegExp
     */
    const regExp = /\S+@\S+\.\S{2,}/;

    /* test() est une m√©thode de l'objet RegExp qui permet de tester si une cha√Æne correspond √† l'expression r√©guli√®re */
    /* Elle renvoie 'true' si la cha√Æne correspond √† l'expression r√©guli√®re et 'false' sinon */
    return regExp.test(email);
  }

  /* On pourrait imaginer d'autres fonctions de validation de champ comme un √¢ge minimum par exemple ... */

  /**
   * Enfin, On √©coute l'√©v√©nement "input", c'est √† dire quand l'utilisateur tape du text, sur l'input de l'email
   * et on appelle la fonction validate √† chaque fois que l'√©v√©nement est d√©clench√© pour v√©rifier si l'email est valide
   */
  emailInput.addEventListener("input", validateNewsletterEmailField);
}

/**
 * Fermer les notifications
 * Cette fonction ferme les notifications quand on clique sur le bouton de fermeture
 * Elle est appel√©e dans l'event listener ci-dessous
 */
function closeNotification() {
  /* On commence par cibler les √©l√©ments de la notification */
  const notifications = document.querySelectorAll("[data-notice]");

  /* Si il n'y a pas de notification on sort de la fonction */
  if (!notifications) {
    return;
  }

  /* On boucle sur les notifications pour ajouter un √©couteur d'√©v√©nement sur le bouton de fermeture */
  notifications.forEach((notice) => {
    /* On r√©cup√®re le bouton de fermeture de la notification */
    const closeBtn = notice.querySelector("[data-close]");

    /* Si closeBtn est null (c'est qu'il n'y en a pas) alors on sort de la boucle */
    if (!closeBtn) {
      return;
    }

    /* On √©coute l'√©v√©nement "click" sur le bouton de fermeture */
    closeBtn.addEventListener("click", () => {
      /* et on supprime la notification */
      notice.remove();
    });
  });
}

/**
 * Fonction qui g√®re le mode sombre/clair
 */
function toggleThemeMode() {
  /**
   * TP: √Ä VOUS DE JOUER !
   * ----------------------------------------------
   * Vous devez √©crire le code qui permet de changer de th√®me en cliquant sur le bouton
   * Suivez les √©tapes ci-dessous pour impl√©menter cette fonctionnalit√© :
   */
  // 1. Ciblez le bouton qui permet de changer de th√®me
  // 2. Ciblez le html pour changer l'attribut [data-theme]
  // 3. V√©rifies si le bouton existe sinon on sort de la fonction
  // 4. √âcoutez l'√©v√©nement "click" sur le bouton
  // 5. Cr√©ez une fonction qui permet de changer le th√®me
  // 6. Dans la fonction, v√©rifiez si le th√®me actuel est "dark"
  // 7. SI c'est le cas, changez le th√®me en "light" en utilisant la m√©thode setAttribute()
  // 8. SINON, changez le th√®me en "dark"
  // 9. Testez votre code en cliquant sur le bouton pour changer de th√®me
  //
  // Bravo ! üëè
  //
  // BONUS:
  // Stockez le th√®me actuel dans le localStorage pour le conserver apr√®s le rechargement de la page
  // 10. R√©cup√©rez le th√®me stock√© dans le localStorage
  // 11. Mettez √† jour le th√®me actuel en utilisant la m√©thode setAttribute()
  // 12. Stockez le th√®me actuel dans le localStorage √† chaque fois que le th√®me change
  // 13. Testez votre code en rechargeant la page pour v√©rifier que le th√®me est conserv√©
  //
  // F√©licitation ! Vous d√©chirez !!! üöÄ
}
