/*
  Ce fichier est chargÃ© sur toutes les pages du site.
  Il contient du code JavaScript qui doit Ãªtre exÃ©cutÃ© sur toutes les pages.
  Par exemple, le code qui gÃ¨re le formulaire de newsletter.

  Pour ajouter du code spÃ©cifique Ã  une page, crÃ©ez un fichier nommÃ© comme la page.
  Par exemple, pour la page "contact.html", crÃ©ez un fichier "contact.js" dans le mÃªme dossier.
 */

/**
 * EVENT LISTENER
 *
 * on Ã©coute l'Ã©vÃ©nement "DOMContentLoaded" sur le document pour vÃ©rifier que le DOM est bien chargÃ©
 * (c'est-Ã -dire que la page est bien prÃªte)
 * et on exÃ©cute une fonction qui contient notre code JavaScript
 * (c'est une bonne pratique pour Ã©viter les problÃ¨mes de chargement)
 *
 * Note: on utilise une fonction flÃ©chÃ©e (ES6) pour dÃ©finir la fonction de rappel
 */
document.addEventListener("DOMContentLoaded", () => {
  /* On affiche un message dans la console pour vÃ©rifier que le fichier est bien chargÃ© (pas obligatoire, mais pratique pour le dÃ©bug) */
  console.log("app.js chargÃ© ğŸš€");
  /* On appelle la fonction newslettersubscribe */
  newslettersubscribe();
  /* On appelle la fonction toggleThemeMode() */
  toggleThemeMode();
});

/**
 * Fonction qui gÃ¨re le formulaire de newsletter
 *
 * Elle vÃ©rifie que l'email est valide et active le bouton d'envoi
 * si c'est le cas
 * (et dÃ©sactive le bouton si l'email n'est pas valide)
 * Cette fonction est appelÃ©e dans l'event listener ci-dessus
 * pour Ãªtre exÃ©cutÃ©e sur toutes les pages
 * (si le formulaire de newsletter est prÃ©sent)
 * @returns {void}
 */
function newslettersubscribe() {
  /* On cible le formulaire de newsletter grace Ã  son id en utilisant querySelector() et on le stock dans une constante "newsletterForm" */
  const newsletterForm = document.querySelector("#newsletter-form");

  /* Si le formulaire n'existe pas, on sort de la fonction ce n'est pas la peine de continuer */
  if (newsletterForm === null) {
    return;
  }

  /* On rÃ©cupÃ¨re l'input de l'email et on le stock dans une constante "emailInput" */
  const emailInput = newsletterForm.querySelector("input[type=email]");
  /* On rÃ©cupÃ¨re le bouton d'envoi et on le stock dans une constante "submitButton" */
  const submitButton = newsletterForm.querySelector("button[type=submit]");

  /* on crÃ©Ã© une function de rappel qui vÃ©rifie si l'email est valide */
  function validate() {
    /* Si l'email est valide, on active le bouton d'envoi */
    if (validateEmail(emailInput.value)) {
      submitButton.disabled = false;
    } else {
      /* Sinon, on dÃ©sactive le bouton d'envoi */
      submitButton.disabled = true;
    }
  }

  /* On crÃ©Ã© une fonction qui vÃ©rifie si l'email est valide */
  function validateEmail(email) {
    const re = /\S+@\S+\.\S+/;
    return re.test(email);
  }

  /** On pourrait imaginer d'autres fonctions de validation de champ ... */

  /**
   * On Ã©coute l'Ã©vÃ©nement "input", c'est Ã  dire quand l'utilisateur tape du text, sur l'input de l'email
   * et on appelle la fonction validate Ã  chaque fois que l'Ã©vÃ©nement est dÃ©clenchÃ© pour vÃ©rifier si l'email est valide
   */
  emailInput.addEventListener("input", validate);
}

/**
 * Fonction qui gÃ¨re le mode sombre/clair
 */
function toggleThemeMode() {
  // TODO: Ã©crire le code qui permet de changer de thÃ¨me

  // 1. On cible le bouton qui permet de changer de thÃ¨me
  const themeButton = document.querySelector("[data-toggle='theme']");
  // 2. On cible le html pour changer le data-theme
  // 3. On Ã©coute l'Ã©vÃ©nement "click" sur le bouton
  themeButton.addEventListener("click", () => {
    alert(
      "ğŸš§\n Le theme switcher n'est pas encore implÃ©mentÃ© ! \n\n Veuillez corriger le JavaScript"
    );
    // 4. On toggle le data-theme du html
    // 5. On permute les icones moon et sun en enlevant l'attribut hidden sur l'icone correspondante
  });
}
