<?php
/**
 * CONNEXION √Ä LA BASE DE DONN√âE
 * ------------------------------
 * Nous devons donc, avant tout, nous connecter √† la base de donn√©e.
 * Pour cela, on va inclure le fichier d'initialisation qui contient la connexion √† la base de donn√©e.
 */ 
include "../includes/db.php";
/**
 * PR√âPARATION DE LA REQU√äTE SQL
 * ------------------------------
 * Nous utilisons la fonction SQL INSERT INTO pour ins√©rer l'adresse email dans la table "subscribers"
 * - On va aussi ins√©rer la date de soumission dans la colonne "subscribed_at"
 *   grace la fonction SQL NOW() qui retourne la date actuelle
 * - On utilise la m√©thode prepare() de la variable $bdd pour pr√©parer la requ√™te
 * - INSERT INTO subscribers : on "ins√®re" des donn√©es dans la table "subscribers"
 * - (email, subscribed_at) : dans les colonnes "email" et "subscribed_at"
 * - VALUES (:email, NOW()) : on ins√®re les valeurs :email et la date actuelle
 * - Enfin, on stocke la requ√™te dans une variable $query
 */
$query = $bdd->prepare("INSERT INTO subscribers (email, subscribed_at) VALUES (:email, NOW())");

/**
 * EX√âCUTION DE LA REQU√äTE SQL
 * ------------------------------
 * ATTENTION : Ne JAMAIS faire confiance aux donn√©es utilisateurs ! J-A-M-A-I-S !!!!
 *
 * On commence donc par √©chapper les donn√©es utilisateurs avant de les ins√©rer dans la base de donn√©e
 * gr√¢ce √† la fonction htmlspecialchars() qui transforme les caract√®res sp√©ciaux en entit√©s HTML
 * afin d'√©viter les failles XSS (Cross-Site Scripting).
 */ 
$sanitizedEmail = htmlspecialchars($_POST['email']);

/**
 * Enfin, on utilise la m√©thode execute() de la variable $query pour ex√©cuter la requ√™te
 * On passe un tableau associatif en argument de la m√©thode execute()
 * Ce tableau contient les valeurs √† ins√©rer dans la requ√™te
 * Ici, on ins√®re la valeur de $sanitizedEmail dans le marqueur :email
 */
$query->execute([
  "email" => $sanitizedEmail
]);

/** On ferme la requ√™te */
$query->closeCursor();

/**
 * Pour les besoins de l'exercice, on va afficher un message de confirmation
 * pour indiquer √† l'utilisateur que son adresse email a bien √©t√© enregistr√©e
 * dans la base de donn√©e.
 *
 * NOTE : dans un vrai projet, on redirigerai l'utilisateur vers une autre page...
 */
echo "Votre adresse <strong>" . $sanitizedEmail . "</strong> a bien √©t√© enregistr√©e dans la base de donn√©e ! üöÄ";
echo "<br>";
echo "<a href='/merci.php?register=subscribers'>Aller √† la page de remerciement</a>";

/**
 * Super ! on a r√©ussi √† enregistrer l'adresse email dans la base de donn√©e.
 * maintenant, on pourrait rediriger l'utilisateur vers une autre page pour lui afficher un message de remerciement.
 */

/**
* REDIRECTION
* ------------------------------
* Cette fonction prend en paramettre "Location" en argument pour indiquer l'URL de la page de destination
* ex: header("Location: /merci.php");
* on peut aussi passer des param√®tres dans l'URL que l'on pourra r√©cup√©rer avec $_GET
* cela peut √™tre utile pour afficher un message de confirmation par exemple
* ex: header("Location: /merci.php?register=subscribers");
*
* D√©commenter la ligne ci-dessous commencant par // pour rediriger l'utilisateur vers la page de remerciement
*/
// header("Location: /merci.php?register=subscribers");

/**
* REMARQUES :
* Il s'agit ici d'un exemple tr√®s simple pour illustrer le principe de base de l'inscription √† une newsletter.
* Dans un vrai projet, on pourrait ajouter des fonctionnalit√©s suppl√©mentaires :
* - v√©rifier que l'adresse email n'est pas d√©j√† enregistr√©e dans la base de donn√©e
* - envoyer un email de confirmation √† l'utilisateur
* - envoyer un email √† l'administrateur pour l'informer de la nouvelle inscription
* - etc...
*/
